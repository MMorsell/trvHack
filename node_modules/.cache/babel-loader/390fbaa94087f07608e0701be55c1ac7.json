{"ast":null,"code":"var _jsxFileName = \"/Users/trafikverket/Desktop/trv/trvHack/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport mapboxgl from \"mapbox-gl\";\nmapboxgl.accessToken = \"pk.eyJ1IjoibW1vcnNlbGwiLCJhIjoiY2syeGZwOXFhMG55eTNjbHFpYjVrbngyMCJ9.eg9D5CWK4Ovb1lYVbGcg3A\";\n\nclass Application extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lng: 17.5695,\n      lat: 61.5578,\n      zoom: 4\n    };\n  }\n\n  componentDidMount() {\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: \"mapbox://styles/mmorsell/ck2xg0hf21ow41dtdntnyp410\",\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom\n    }); // var bounds = [[17.5695, 61.5578], [17.5695, 61.5578]];\n    // map.setMaxBounds(bounds);\n\n    var start = [15.662323, 60.523751];\n    map.on(\"move\", () => {\n      this.setState({\n        lng: map.getCenter().lng.toFixed(4),\n        lat: map.getCenter().lat.toFixed(4),\n        zoom: map.getZoom().toFixed(2)\n      });\n    });\n\n    function getRoute(end) {\n      // make a directions request using cycling profile\n      // an arbitrary start will always be the same\n      // only the end or destination will change\n      var start = [15.662323, 60.523751];\n      var url = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + start[0] + ',' + start[1] + ';' + end[0] + ',' + end[1] + '?steps=true&geometries=geojson&access_token=' + mapboxgl.accessToken; // make an XHR request https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\n\n      var req = new XMLHttpRequest();\n      req.responseType = 'json';\n      req.open('GET', url, true);\n\n      req.onload = function () {\n        debugger;\n        var data = req.response.routes[0];\n        var route = data.geometry.coordinates;\n        var geojson = {\n          type: 'Feature',\n          properties: {},\n          geometry: {\n            type: 'LineString',\n            coordinates: route\n          }\n        }; // if the route already exists on the map, reset it using setData\n\n        if (map.getSource('route')) {\n          map.getSource('route').setData(geojson);\n        } else {\n          // otherwise, make a new request\n          map.addLayer({\n            id: 'route',\n            type: 'line',\n            source: {\n              type: 'geojson',\n              data: {\n                type: 'Feature',\n                properties: {},\n                geometry: {\n                  type: 'LineString',\n                  coordinates: geojson\n                }\n              }\n            },\n            layout: {\n              'line-join': 'round',\n              'line-cap': 'round'\n            },\n            paint: {\n              'line-color': '#ffffff',\n              'line-width': 5,\n              'line-opacity': 0.75\n            }\n          });\n        } // add turn instructions here at the end\n\n      };\n\n      req.send();\n    }\n\n    map.on('load', function () {\n      // make an initial directions request that\n      // starts and ends at the same location\n      getRoute(start); // Add starting point to the map\n\n      map.addLayer({\n        id: 'point',\n        type: 'circle',\n        source: {\n          type: 'geojson',\n          data: {\n            type: 'FeatureCollection',\n            features: [{\n              type: 'Feature',\n              properties: {},\n              geometry: {\n                type: 'Point',\n                coordinates: start\n              }\n            }]\n          }\n        },\n        paint: {\n          'circle-radius': 10,\n          'circle-color': '#3887be'\n        }\n      }); // this is where the code from the next step will go\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"sidebarStyle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"Longitude: \", this.state.lng, \" | Latitude: \", this.state.lat, \" | Zoom:\", \" \", this.state.zoom)), React.createElement(\"div\", {\n      ref: el => this.mapContainer = el,\n      className: \"mapContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }));\n  }\n\n}\n\nReactDOM.render(React.createElement(Application, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 146\n  },\n  __self: this\n}), document.getElementById(\"app\"));","map":{"version":3,"sources":["/Users/trafikverket/Desktop/trv/trvHack/src/index.js"],"names":["React","ReactDOM","mapboxgl","accessToken","Application","Component","constructor","props","state","lng","lat","zoom","componentDidMount","map","Map","container","mapContainer","style","center","start","on","setState","getCenter","toFixed","getZoom","getRoute","end","url","req","XMLHttpRequest","responseType","open","onload","data","response","routes","route","geometry","coordinates","geojson","type","properties","getSource","setData","addLayer","id","source","layout","paint","send","features","render","el","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,QAAP,MAAqB,WAArB;AAEAA,QAAQ,CAACC,WAAT,GACE,4FADF;;AAGA,MAAMC,WAAN,SAA0BJ,KAAK,CAACK,SAAhC,CAA0C;AACxCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,GAAG,EAAE,OADM;AAEXC,MAAAA,GAAG,EAAE,OAFM;AAGXC,MAAAA,IAAI,EAAE;AAHK,KAAb;AAKD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,UAAMC,GAAG,GAAG,IAAIX,QAAQ,CAACY,GAAb,CAAiB;AAC3BC,MAAAA,SAAS,EAAE,KAAKC,YADW;AAE3BC,MAAAA,KAAK,EAAE,oDAFoB;AAG3BC,MAAAA,MAAM,EAAE,CAAC,KAAKV,KAAL,CAAWC,GAAZ,EAAiB,KAAKD,KAAL,CAAWE,GAA5B,CAHmB;AAI3BC,MAAAA,IAAI,EAAE,KAAKH,KAAL,CAAWG;AAJU,KAAjB,CAAZ,CADkB,CAQlB;AACA;;AAEA,QAAIQ,KAAK,GAAG,CAAC,SAAD,EAAY,SAAZ,CAAZ;AAEAN,IAAAA,GAAG,CAACO,EAAJ,CAAO,MAAP,EAAe,MAAM;AACnB,WAAKC,QAAL,CAAc;AACZZ,QAAAA,GAAG,EAAEI,GAAG,CAACS,SAAJ,GAAgBb,GAAhB,CAAoBc,OAApB,CAA4B,CAA5B,CADO;AAEZb,QAAAA,GAAG,EAAEG,GAAG,CAACS,SAAJ,GAAgBZ,GAAhB,CAAoBa,OAApB,CAA4B,CAA5B,CAFO;AAGZZ,QAAAA,IAAI,EAAEE,GAAG,CAACW,OAAJ,GAAcD,OAAd,CAAsB,CAAtB;AAHM,OAAd;AAKD,KAND;;AAQA,aAASE,QAAT,CAAkBC,GAAlB,EAAuB;AACrB;AACA;AACA;AACA,UAAIP,KAAK,GAAG,CAAC,SAAD,EAAY,SAAZ,CAAZ;AACA,UAAIQ,GAAG,GAAG,yDAAyDR,KAAK,CAAC,CAAD,CAA9D,GAAoE,GAApE,GAA0EA,KAAK,CAAC,CAAD,CAA/E,GAAqF,GAArF,GAA2FO,GAAG,CAAC,CAAD,CAA9F,GAAoG,GAApG,GAA0GA,GAAG,CAAC,CAAD,CAA7G,GAAmH,8CAAnH,GAAoKxB,QAAQ,CAACC,WAAvL,CALqB,CAOrB;;AACA,UAAIyB,GAAG,GAAG,IAAIC,cAAJ,EAAV;AACAD,MAAAA,GAAG,CAACE,YAAJ,GAAmB,MAAnB;AACAF,MAAAA,GAAG,CAACG,IAAJ,CAAS,KAAT,EAAgBJ,GAAhB,EAAqB,IAArB;;AACAC,MAAAA,GAAG,CAACI,MAAJ,GAAa,YAAW;AACtB;AACA,YAAIC,IAAI,GAAGL,GAAG,CAACM,QAAJ,CAAaC,MAAb,CAAoB,CAApB,CAAX;AACA,YAAIC,KAAK,GAAGH,IAAI,CAACI,QAAL,CAAcC,WAA1B;AACA,YAAIC,OAAO,GAAG;AACZC,UAAAA,IAAI,EAAE,SADM;AAEZC,UAAAA,UAAU,EAAE,EAFA;AAGZJ,UAAAA,QAAQ,EAAE;AACRG,YAAAA,IAAI,EAAE,YADE;AAERF,YAAAA,WAAW,EAAEF;AAFL;AAHE,SAAd,CAJsB,CAYtB;;AACA,YAAIvB,GAAG,CAAC6B,SAAJ,CAAc,OAAd,CAAJ,EAA4B;AAC1B7B,UAAAA,GAAG,CAAC6B,SAAJ,CAAc,OAAd,EAAuBC,OAAvB,CAA+BJ,OAA/B;AACD,SAFD,MAEO;AAAE;AACP1B,UAAAA,GAAG,CAAC+B,QAAJ,CAAa;AACXC,YAAAA,EAAE,EAAE,OADO;AAEXL,YAAAA,IAAI,EAAE,MAFK;AAGXM,YAAAA,MAAM,EAAE;AACNN,cAAAA,IAAI,EAAE,SADA;AAENP,cAAAA,IAAI,EAAE;AACJO,gBAAAA,IAAI,EAAE,SADF;AAEJC,gBAAAA,UAAU,EAAE,EAFR;AAGJJ,gBAAAA,QAAQ,EAAE;AACRG,kBAAAA,IAAI,EAAE,YADE;AAERF,kBAAAA,WAAW,EAAEC;AAFL;AAHN;AAFA,aAHG;AAcXQ,YAAAA,MAAM,EAAE;AACN,2BAAa,OADP;AAEN,0BAAY;AAFN,aAdG;AAkBXC,YAAAA,KAAK,EAAE;AACL,4BAAc,SADT;AAEL,4BAAc,CAFT;AAGL,8BAAgB;AAHX;AAlBI,WAAb;AAwBD,SAxCqB,CAyCtB;;AACD,OA1CD;;AA2CApB,MAAAA,GAAG,CAACqB,IAAJ;AACD;;AAGDpC,IAAAA,GAAG,CAACO,EAAJ,CAAO,MAAP,EAAe,YAAW;AACxB;AACA;AACAK,MAAAA,QAAQ,CAACN,KAAD,CAAR,CAHwB,CAKxB;;AACAN,MAAAA,GAAG,CAAC+B,QAAJ,CAAa;AACXC,QAAAA,EAAE,EAAE,OADO;AAEXL,QAAAA,IAAI,EAAE,QAFK;AAGXM,QAAAA,MAAM,EAAE;AACNN,UAAAA,IAAI,EAAE,SADA;AAENP,UAAAA,IAAI,EAAE;AACJO,YAAAA,IAAI,EAAE,mBADF;AAEJU,YAAAA,QAAQ,EAAE,CAAC;AACTV,cAAAA,IAAI,EAAE,SADG;AAETC,cAAAA,UAAU,EAAE,EAFH;AAGTJ,cAAAA,QAAQ,EAAE;AACRG,gBAAAA,IAAI,EAAE,OADE;AAERF,gBAAAA,WAAW,EAAEnB;AAFL;AAHD,aAAD;AAFN;AAFA,SAHG;AAkBX6B,QAAAA,KAAK,EAAE;AACL,2BAAiB,EADZ;AAEL,0BAAgB;AAFX;AAlBI,OAAb,EANwB,CA6BxB;AACD,KA9BD;AAgCD;;AAEDG,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACc,KAAK3C,KAAL,CAAWC,GADzB,mBAC2C,KAAKD,KAAL,CAAWE,GADtD,cACmE,GADnE,EAEG,KAAKF,KAAL,CAAWG,IAFd,CADF,CADF,EAOE;AAAK,MAAA,GAAG,EAAEyC,EAAE,IAAK,KAAKpC,YAAL,GAAoBoC,EAArC;AAA0C,MAAA,SAAS,EAAC,cAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,CADF;AAWD;;AAvIuC;;AA0I1CnD,QAAQ,CAACkD,MAAT,CAAgB,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAiCE,QAAQ,CAACC,cAAT,CAAwB,KAAxB,CAAjC","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport mapboxgl from \"mapbox-gl\";\n\nmapboxgl.accessToken =\n  \"pk.eyJ1IjoibW1vcnNlbGwiLCJhIjoiY2syeGZwOXFhMG55eTNjbHFpYjVrbngyMCJ9.eg9D5CWK4Ovb1lYVbGcg3A\";\n\nclass Application extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lng: 17.5695 ,\n      lat: 61.5578,\n      zoom: 4\n    };\n  }\n\n  componentDidMount() {\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: \"mapbox://styles/mmorsell/ck2xg0hf21ow41dtdntnyp410\",\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom\n    });\n\n    // var bounds = [[17.5695, 61.5578], [17.5695, 61.5578]];\n    // map.setMaxBounds(bounds);\n\n    var start = [15.662323, 60.523751];\n\n    map.on(\"move\", () => {\n      this.setState({\n        lng: map.getCenter().lng.toFixed(4),\n        lat: map.getCenter().lat.toFixed(4),\n        zoom: map.getZoom().toFixed(2)\n      });\n    });\n\n    function getRoute(end) {\n      // make a directions request using cycling profile\n      // an arbitrary start will always be the same\n      // only the end or destination will change\n      var start = [15.662323, 60.523751];\n      var url = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + start[0] + ',' + start[1] + ';' + end[0] + ',' + end[1] + '?steps=true&geometries=geojson&access_token=' + mapboxgl.accessToken;\n    \n      // make an XHR request https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\n      var req = new XMLHttpRequest();\n      req.responseType = 'json';\n      req.open('GET', url, true);\n      req.onload = function() {\n        debugger;\n        var data = req.response.routes[0];\n        var route = data.geometry.coordinates;\n        var geojson = {\n          type: 'Feature',\n          properties: {},\n          geometry: {\n            type: 'LineString',\n            coordinates: route\n          }\n        };\n        // if the route already exists on the map, reset it using setData\n        if (map.getSource('route')) {\n          map.getSource('route').setData(geojson);\n        } else { // otherwise, make a new request\n          map.addLayer({\n            id: 'route',\n            type: 'line',\n            source: {\n              type: 'geojson',\n              data: {\n                type: 'Feature',\n                properties: {},\n                geometry: {\n                  type: 'LineString',\n                  coordinates: geojson\n                }\n              }\n            },\n            layout: {\n              'line-join': 'round',\n              'line-cap': 'round'\n            },\n            paint: {\n              'line-color': '#ffffff',\n              'line-width': 5,\n              'line-opacity': 0.75\n            }\n          });\n        }\n        // add turn instructions here at the end\n      };\n      req.send();\n    }\n\n\n    map.on('load', function() {\n      // make an initial directions request that\n      // starts and ends at the same location\n      getRoute(start);\n    \n      // Add starting point to the map\n      map.addLayer({\n        id: 'point',\n        type: 'circle',\n        source: {\n          type: 'geojson',\n          data: {\n            type: 'FeatureCollection',\n            features: [{\n              type: 'Feature',\n              properties: {},\n              geometry: {\n                type: 'Point',\n                coordinates: start\n              }\n            }\n            ]\n          }\n        },\n        paint: {\n          'circle-radius': 10,\n          'circle-color': '#3887be'\n        }\n      });\n      // this is where the code from the next step will go\n    });\n\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"sidebarStyle\">\n          <div>\n            Longitude: {this.state.lng} | Latitude: {this.state.lat} | Zoom:{\" \"}\n            {this.state.zoom}\n          </div>\n        </div>\n        <div ref={el => (this.mapContainer = el)} className=\"mapContainer\" />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Application />, document.getElementById(\"app\"));\n"]},"metadata":{},"sourceType":"module"}