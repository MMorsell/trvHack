{"ast":null,"code":"var _jsxFileName = \"/Users/trafikverket/Desktop/trv/trvHack/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport mapboxgl from \"mapbox-gl\";\nmapboxgl.accessToken = \"pk.eyJ1IjoibW1vcnNlbGwiLCJhIjoiY2syeGZwOXFhMG55eTNjbHFpYjVrbngyMCJ9.eg9D5CWK4Ovb1lYVbGcg3A\";\n\nclass Application extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lng: 17.5695,\n      lat: 61.5578,\n      zoom: 4\n    };\n  }\n\n  componentDidMount() {\n    let startingLongitude;\n    let startingLatitude;\n\n    function getLocation() {\n      if (navigator.geolocation) {\n        return navigator.geolocation.getCurrentPosition(showPosition);\n      } else {\n        console.log(\"Geolocation is not supported by this browser.\");\n      }\n    }\n\n    function showPosition(position) {\n      startingLongitude = position.coords.latitude;\n      startingLatitude = position.coords.longitude;\n    }\n\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: \"mapbox://styles/mmorsell/ck2xg0hf21ow41dtdntnyp410\",\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom\n    }); // var bounds = [[17.5695, 61.5578], [17.5695, 61.5578]];\n    // map.setMaxBounds(bounds);\n\n    var canvas = map.getCanvasContainer();\n    var start = [15.662323, 60.523751];\n\n    function getRoute(end) {\n      getLocation(); // make a directions request using cycling profile\n      // an arbitrary start will always be the same\n      // only the end or destination will change\n\n      var start = [startingLatitude, startingLongitude]; // var start = [15.662323, 60.523751];\n\n      var url = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + start[0] + ',' + start[1] + ';' + end[0] + ',' + end[1] + '?steps=true&geometries=geojson&access_token=' + mapboxgl.accessToken; // make an XHR request https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\n\n      var req = new XMLHttpRequest();\n      req.responseType = 'json';\n      req.open('GET', url, true);\n\n      req.onload = function () {\n        debugger;\n        var data = req.response.routes[0];\n        var route = data.geometry.coordinates;\n        var geojson = {\n          type: 'Feature',\n          properties: {},\n          geometry: {\n            type: 'LineString',\n            coordinates: route\n          }\n        }; // if the route already exists on the map, reset it using setData\n\n        if (map.getSource('route')) {\n          map.getSource('route').setData(geojson);\n        } else {\n          // otherwise, make a new request\n          map.addLayer({\n            id: 'route',\n            type: 'line',\n            source: {\n              type: 'geojson',\n              data: {\n                type: 'Feature',\n                properties: {},\n                geometry: {\n                  type: 'LineString',\n                  coordinates: geojson\n                }\n              }\n            },\n            layout: {\n              'line-join': 'round',\n              'line-cap': 'round'\n            },\n            paint: {\n              'line-color': '#3887be',\n              'line-width': 5,\n              'line-opacity': 0.75\n            }\n          });\n        } // add turn instructions here at the end\n\n      };\n\n      req.send();\n    }\n\n    map.on('click', function (e) {\n      var coordsObj = e.lngLat;\n      canvas.style.cursor = '';\n      var coords = Object.keys(coordsObj).map(function (key) {\n        return coordsObj[key];\n      });\n      var end = {\n        type: 'FeatureCollection',\n        features: [{\n          type: 'Feature',\n          properties: {},\n          geometry: {\n            type: 'Point',\n            coordinates: coords\n          }\n        }]\n      };\n\n      if (map.getLayer('end')) {\n        map.getSource('end').setData(end);\n      } else {\n        map.addLayer({\n          id: 'end',\n          type: 'circle',\n          source: {\n            type: 'geojson',\n            data: {\n              type: 'FeatureCollection',\n              features: [{\n                type: 'Feature',\n                properties: {},\n                geometry: {\n                  type: 'Point',\n                  coordinates: coords\n                }\n              }]\n            }\n          },\n          paint: {\n            'circle-radius': 10,\n            'circle-color': '#f30'\n          }\n        });\n      }\n\n      getRoute(coords);\n    });\n    map.on(\"move\", () => {\n      this.setState({\n        lng: map.getCenter().lng.toFixed(4),\n        lat: map.getCenter().lat.toFixed(4),\n        zoom: map.getZoom().toFixed(2)\n      });\n    });\n    map.on('load', function () {\n      // make an initial directions request that\n      // starts and ends at the same location\n      getRoute(start); // Add starting point to the map\n\n      map.addLayer({\n        id: 'point',\n        type: 'circle',\n        source: {\n          type: 'geojson',\n          data: {\n            type: 'FeatureCollection',\n            features: [{\n              type: 'Feature',\n              properties: {},\n              geometry: {\n                type: 'Point',\n                coordinates: start\n              }\n            }]\n          }\n        },\n        paint: {\n          'circle-radius': 10,\n          'circle-color': '#ffffff'\n        }\n      }); // this is where the code from the next step will go\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"sidebarStyle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, \"Longitude: \", this.state.lng, \" | Latitude: \", this.state.lat, \" | Zoom:\", \" \", this.state.zoom)), React.createElement(\"div\", {\n      ref: el => this.mapContainer = el,\n      className: \"mapContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }));\n  }\n\n}\n\nReactDOM.render(React.createElement(Application, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 213\n  },\n  __self: this\n}), document.getElementById(\"app\"));","map":{"version":3,"sources":["/Users/trafikverket/Desktop/trv/trvHack/src/index.js"],"names":["React","ReactDOM","mapboxgl","accessToken","Application","Component","constructor","props","state","lng","lat","zoom","componentDidMount","startingLongitude","startingLatitude","getLocation","navigator","geolocation","getCurrentPosition","showPosition","console","log","position","coords","latitude","longitude","map","Map","container","mapContainer","style","center","canvas","getCanvasContainer","start","getRoute","end","url","req","XMLHttpRequest","responseType","open","onload","data","response","routes","route","geometry","coordinates","geojson","type","properties","getSource","setData","addLayer","id","source","layout","paint","send","on","e","coordsObj","lngLat","cursor","Object","keys","key","features","getLayer","setState","getCenter","toFixed","getZoom","render","el","document","getElementById"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport mapboxgl from \"mapbox-gl\";\n\nmapboxgl.accessToken =\n  \"pk.eyJ1IjoibW1vcnNlbGwiLCJhIjoiY2syeGZwOXFhMG55eTNjbHFpYjVrbngyMCJ9.eg9D5CWK4Ovb1lYVbGcg3A\";\n\nclass Application extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lng: 17.5695 ,\n      lat: 61.5578,\n      zoom: 4\n    };\n  }\n\n\n  componentDidMount() {\n    let startingLongitude;\n    let startingLatitude;\n\n    function getLocation() {\n      if (navigator.geolocation) {\n        return (navigator.geolocation.getCurrentPosition(showPosition));\n      } else { \n        console.log(\"Geolocation is not supported by this browser.\");\n      }\n    }\n    \n    function showPosition(position) {\n      startingLongitude = position.coords.latitude;\n      startingLatitude = position.coords.longitude;\n    }\n\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: \"mapbox://styles/mmorsell/ck2xg0hf21ow41dtdntnyp410\",\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom\n    });\n\n    // var bounds = [[17.5695, 61.5578], [17.5695, 61.5578]];\n    // map.setMaxBounds(bounds);\n    var canvas = map.getCanvasContainer();\n    var start = [15.662323, 60.523751];\n\n    function getRoute(end) {\n      getLocation();\n      // make a directions request using cycling profile\n      // an arbitrary start will always be the same\n      // only the end or destination will change\n      var start = [startingLatitude, startingLongitude];\n      // var start = [15.662323, 60.523751];\n      var url = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + start[0] + ',' + start[1] + ';' + end[0] + ',' + end[1] + '?steps=true&geometries=geojson&access_token=' + mapboxgl.accessToken;\n    \n      // make an XHR request https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\n      var req = new XMLHttpRequest();\n      req.responseType = 'json';\n      req.open('GET', url, true);\n      req.onload = function() {\n        debugger;\n        var data = req.response.routes[0];\n        var route = data.geometry.coordinates;\n        var geojson = {\n          type: 'Feature',\n          properties: {},\n          geometry: {\n            type: 'LineString',\n            coordinates: route\n          }\n        };\n        // if the route already exists on the map, reset it using setData\n        if (map.getSource('route')) {\n          map.getSource('route').setData(geojson);\n        } else { // otherwise, make a new request\n          map.addLayer({\n            id: 'route',\n            type: 'line',\n            source: {\n              type: 'geojson',\n              data: {\n                type: 'Feature',\n                properties: {},\n                geometry: {\n                  type: 'LineString',\n                  coordinates: geojson\n                }\n              }\n            },\n            layout: {\n              'line-join': 'round',\n              'line-cap': 'round'\n            },\n            paint: {\n              'line-color': '#3887be',\n              'line-width': 5,\n              'line-opacity': 0.75\n            }\n          });\n        }\n        // add turn instructions here at the end\n      };\n      req.send();\n    }\n\n\n    map.on('click', function(e) {\n      var coordsObj = e.lngLat;\n      canvas.style.cursor = '';\n      var coords = Object.keys(coordsObj).map(function(key) {\n        return coordsObj[key];\n      });\n      var end = {\n        type: 'FeatureCollection',\n        features: [{\n          type: 'Feature',\n          properties: {},\n          geometry: {\n            type: 'Point',\n            coordinates: coords\n          }\n        }\n        ]\n      };\n      if (map.getLayer('end')) {\n        map.getSource('end').setData(end);\n      } else {\n        map.addLayer({\n          id: 'end',\n          type: 'circle',\n          source: {\n            type: 'geojson',\n            data: {\n              type: 'FeatureCollection',\n              features: [{\n                type: 'Feature',\n                properties: {},\n                geometry: {\n                  type: 'Point',\n                  coordinates: coords\n                }\n              }]\n            }\n          },\n          paint: {\n            'circle-radius': 10,\n            'circle-color': '#f30'\n          }\n        });\n      }\n      getRoute(coords);\n    });\n\n\n    map.on(\"move\", () => {\n      this.setState({\n        lng: map.getCenter().lng.toFixed(4),\n        lat: map.getCenter().lat.toFixed(4),\n        zoom: map.getZoom().toFixed(2)\n      });\n    });\n\n    map.on('load', function() {\n      // make an initial directions request that\n      // starts and ends at the same location\n      getRoute(start);\n    \n      // Add starting point to the map\n      map.addLayer({\n        id: 'point',\n        type: 'circle',\n        source: {\n          type: 'geojson',\n          data: {\n            type: 'FeatureCollection',\n            features: [{\n              type: 'Feature',\n              properties: {},\n              geometry: {\n                type: 'Point',\n                coordinates: start\n              }\n            }\n            ]\n          }\n        },\n        paint: {\n          'circle-radius': 10,\n          'circle-color': '#ffffff'\n        }\n      });\n      // this is where the code from the next step will go\n    });\n\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"sidebarStyle\">\n          <div>\n            Longitude: {this.state.lng} | Latitude: {this.state.lat} | Zoom:{\" \"}\n            {this.state.zoom}\n          </div>\n        </div>\n        <div ref={el => (this.mapContainer = el)} className=\"mapContainer\" />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Application />, document.getElementById(\"app\"));\n"]},"metadata":{},"sourceType":"module"}